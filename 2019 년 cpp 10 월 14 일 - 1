//--------------------------------------------------------------------------
// 2019. 10 . 14 c++                           월 56 수 34      
// 강의 소개
// 
//	사용자 정의 자료형 ( User-Defined Data type) 
//	- 어떤 자료형이라도 새로운 이름으로 묶을 수 있다. (struct, class)
//	- 묶인 자료는 메모리를 얼마나 차지하나?
//		-> 속도를 위해 메모리를 더 많이 사용한다.
//	- 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//	함수 오버로딩 
//
//--------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;


class Dog 
{	
private:	//멤버 변수는 여기에 만든다. 평소엔 생략
	string name;
	int age;
	
public:		//멤버함수는 여기에 만든다. 평소엔 생략 
	Dog() = default;	//delete로 바꾸면 이 부분은 실행 X	// default constructor - 자동으로 생성
	~Dog() = default;						// destructor
	Dog(const Dog&) = default;				// copy constructor
	Dog& operator=(const Dog&) = default;	// copy assignment operator
	Dog(Dog&&) = default;					// move constructor
	Dog& operator =  (Dog&&) = default;		// move assignment operator
};

int main()
{
	//이 코드가 문제없이 실행되는 이유는 
	//컴파일러가 사용자정의 자료형에 대하여
	//special member function을 만들기 때문이다.

	Dog a;		// Dog()
	Dog b{ a }; // Dog(const Dog&)
	a = b;		// a.operator = (const Dog&) 

	save("소스.cpp");
}
