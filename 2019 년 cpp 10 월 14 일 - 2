//--------------------------------------------------------------------------
// 2019. 10 . 14 c++                           월 56 수 34      
// 강의 소개
// 
//	사용자 정의 자료형 ( User-Defined Data type) 
//	- 어떤 자료형이라도 새로운 이름으로 묶을 수 있다. (struct, class)
//	- 묶인 자료는 메모리를 얼마나 차지하나?
//		-> 속도를 위해 메모리를 더 많이 사용한다.
//	- 묶어 사용할때(생성, 대입, 복사, 소멸) 어떤 일이 일어나나?
//	함수 오버로딩 
//
//--------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

using namespace std;

// const와 &의 정확한 사용법이 매우 중요함

int SN{};

class Dog 
{	
private:
	int id{ SN++ };			// 개마다 고유의 식별번호를 준다
	string name;
	int age;
	
public:	 
	//생성자 - 객체가 만들어질 때 메모리를 어떻게 설정할 건가?
	Dog() : name{ "없음" }, age{} {
		cout << id <<  " - 디폴트 생성자" << endl;
	}
	//소멸자 - 생성시자원을 할당했다면 소멸자를 코딩해야 한다.
	~Dog() {
		cout << id << " - 소멸자" << endl;
	}


	// 멤버변수의 값을 읽게 하려면 gettor를 코딩

	// 멤버변수의 값을 쓰게 하려면 settor를 코딩
	

	void run() {
		cout << id << " - " << name << " - " << age << " 달린다"  << endl;
	}

	void show() {
		cout << id << " - " << name << ", " << age << endl;
	}
};



int main()
{
	cout << "메인 시작" << endl;

	Dog* x = new Dog;

	save("소스.cpp");

	delete x;

	cout << "메인 끝 " << endl;
}
